[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_i = 1
if = 'has("nvim")'
hook_source = '''
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#auto_complete_delay = 0
    let g:deoplete#auto_complete_start_length = 1
    let g:deoplete#enable_camel_case = 0
    let g:deoplete#enable_ignore_case = 0
    let g:deoplete#enable_refresh_always = 0
    let g:deoplete#enable_smart_case = 1
    let g:deoplete#file#enable_buffer_path = 1

    imap <expr><tab> pumvisible() ? "\<C-n>" :
        \ neosnippet#jumpable() ?
        \   "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

    imap <expr><CR> neosnippet#expandable() ? "<Plug>(neosnippet_expand_or_jump)"
         \ : pumvisible() ? "<C-y>" : "<CR>"

    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> deoplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> deoplete#smart_close_popup()."\<C-h>"

    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

    smap <expr><tab> neosnippet#jumpable() ?
         \ "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
'''


#neosnippet----------------

[[plugins]]
repo = 'Shougo/neosnippet.vim'
on_event = 'InsertCharPre'
on_ft = ['snippet']
depends = ['neosnippet-snippets', 'context_filetype.vim']
hook_source = '''

    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
    xmap <C-k> <Plug>(neosnippet_expand_target)

    let g:neosnippet#enable_snipmate_compatibility = 1
    let g:neosnippet#enable_completed_snippet = 1
    let g:neosnippet#expand_word_boundary = 1

    let g:neosnippet#snippets_directory=
        \'~/.cache/dein/repos/github.com/Shougo/neosnippet-snippets/snippets'

    if has('conceal')
      set conceallevel=2 concealcursor=niv
    endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'


[[plugins]]
repo = 'Shougo/unite.vim'
# if = '!has("nvim")'
on_cmd = 'Unite'
depends = 'neomru.vim'

[[plugins]]
repo = 'Shougo/Denite.nvim'
if = 'has("nvim")'
on_cmd = 'Denite'
depends = 'neomru.vim'
hook_add= '''
    nnoremap <Space>p :Denite file_rec<CR>
    nnoremap <Space>u :Denite -mode=normal file_mru<CR>
    nnoremap <Space>y :Denite neoyank<CR>
    nnoremap <Space>r :Denite -resume<CR>
    nnoremap <Space>b :Denite -mode=normal buffer<CR>
    nnoremap <Space>d :Denite dein<CR>
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_i = 1

[[plugins]] # Emmet
repo = 'mattn/emmet-vim'
on_i = 1
on_ft = ['php', 'html', 'css']
hook_source = '''
    let g:user_emmet_mode = 'i'
    let g:user_emmet_leader_key='<C-E>'
    let g:use_emmet_complete_tag = 1
    let g:user_emmet_settings = {
    \   'variables': {
    \       'lang': "ja"
    \   },
    \   'indentation': '    '
    \}
'''
[[plugins]]
repo = 'shima-529/C-prototype.vim'
on_ft = ['c', 'cpp']
hook_add = '''
    " augroup c_proto
    "     autocmd! BufWritePre *.c,*.cpp silent! :CPrototypeMake
    " augroup END
    " let g:c_prototype_no_default_keymappings = 1
'''

[[plugins]]
repo = 'kana/vim-submode'
on_event = ['VimEnter']
hook_post_source = '''
    call submode#enter_with('bufmove', 'n', '', 's>', '<C-w>>')
    call submode#enter_with('bufmove', 'n', '', 's<', '<C-w><')
    call submode#enter_with('bufmove', 'n', '', 's+', '<C-w>+')
    call submode#enter_with('bufmove', 'n', '', 's-', '<C-w>-')
    call submode#map('bufmove', 'n', '', '>', '<C-w>>')
    call submode#map('bufmove', 'n', '', '<', '<C-w><')
    call submode#map('bufmove', 'n', '', '+', '<C-w>+')
    call submode#map('bufmove', 'n', '', '-', '<C-w>-')
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
on_event = ['VimEnter']
hook_post_source = '''
    let g:quickrun_config = {}
    let g:quickrun_config.c = {
    \   'command': 'gcc',
    \   'cmdopt': '-lm'
    \}
'''
